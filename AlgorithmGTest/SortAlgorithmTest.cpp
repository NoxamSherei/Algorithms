#pragma once
#include "pch.h"


struct TestDataStruct {
	const int table5Positiv[5]{ 1,2,3,4,5 };
	const int table5[5]{ 43, 93, 44, 65, 54 };
	const int table10[10]{ 063,011,064,81,004,59,97,057,002,037 };
	const int table100[100]{ 063,011,064,81,004,59,97,057,002,037,87,38,48,9,077,021,90,010,014,036,69,98,012,015,033,79,025,29,92,
					   003,041,056,88,89,86,96,067,80,94,075,006,076,024,39,035,000,78,017,100,82,8,28,95,070,022,016,055,061,
					   18,91,052,042,053,046,68,044,047,065,074,030,023,073,19,020,027,85,99,007,071,040,032,49,031,013,060,026,
					   001,93,050,84,005,034,062,051,043,072,045,054,58,83 };
	const int table1000[1000]{ 0251,1435,823,0657,0217,1007,0636,281,815,1213,0550,0537,0046,1520,0567,1427,1910,0460,1747,0417,1876,0032,
						   1029,0572,0473,238,943,828,1705,0545,1491,1718,1568,0016,139,708,1534,1590,1953,0332,0131,1264,1868,588,1363,
						   0102,1884,1478,695,1042,1063,999,1192,0615,0345,0623,1790,289,259,879,1021,1128,807,1769,0353,0067,1456,759,850,
						   1641,738,914,1448,1846,0652,1170,679,0152,1200,59,0011,1093,379,1050,508,0665,1662,0674,1106,871,1576,1461,0337,
						   1178,0123,1820,1670,118,0772,1341,0166,1691,0054,965,0764,1897,1969,1221,1996,0203,0516,0110,1328,1675,1697,1632,
						   1825,0716,978,1256,0422,922,892,1512,1654,1761,1440,0401,986,0700,88,1392,1483,0273,1371,1547,80,1948,1285,1803,780,
						   786,1833,0161,0644,1726,481,1683,609,1299,294,1307,1739,1504,209,1563,438,1812,0225,0452,0302,0751,1405,1974,0267,0323,
						   687,1598,1397,629,0601,1854,96,836,1149,0743,1961,1777,1798,1734,1926,1349,1611,1889,0524,1555,1526,0144,1755,1862,1542,
						   0503,1619,802,0721,0024,1584,0374,0003,1649,182,580,1918,1905,1414,1419,0465,794,1277,358,1114,0315,1243,1932,396,1940,1841,
						   1606,0310,195,1072,0444,858,1085,935,1384,38,0075,901,957,1320,0230,1499,0631,1234,486,0730,1470,1782,1376,593,409,0430,0366,559,
						   1982,1713,1991,1157,187,1627,0246,388,494,0174,1136,1523,0433,0233,1366,1438,690,1464,1673,1985,1579,797,1144,1165,1101,1293,185,
						   0447,0724,1892,390,0361,981,1122,1229,909,1870,0455,169,1558,861,951,1742,839,1016,1550,1416,0754,1272,249,0254,1301,1630,0113,1195,
						   1951,1152,78,0767,1764,0775,1208,973,1678,1032,1908,1280,1694,1921,1772,0220,874,1443,1737,1793,0155,1066,866,1999,0070,1323,1566,0305,
						   618,0211,1430,1245,1267,1203,1395,818,1080,1357,1993,1024,994,1614,1224,1331,1010,1972,1088,0270,190,1494,1053,1844,1472,1117,1652,49,1387,
						   1374,882,887,1935,0262,0746,1828,583,1785,0711,1400,1865,1408,1310,1074,1780,1665,0540,1913,0326,0553,0404,853,1507,1545,369,0425,788,1699,
						   968,99,0703,1956,198,938,1251,845,0062,1879,1900,1836,0027,1451,1181,1459,0626,1657,1096,1716,1857,1964,1643,0604,1721,903,292,0126,1686,
						   0476,0105,1750,284,682,19,0006,1515,989,0035,895,1379,1929,1216,1887,1344,1502,497,0040,1943,1708,0412,297,1173,0014,959,1186,1037,1486,
						   1609,0177,1002,1058,1422,1801,1601,0732,1336,0057,831,1571,1352,946,0163,0511,0532,468,0660,83,1814,91,1259,1758,1729,348,489,596,0276,1237,
						   1823,1537,925,228,318,1109,0206,382,917,1315,0121,639,0147,1622,668,1528,1481,0561,1849,519,1977,0134,1130,0142,0575,0340,1045,930,1806,0647,
						   1593,1288,1139,1587,0241,810,1635,1160,1335,1143,0347,865,1843,1848,1223,1707,1544,0745,1672,0360,368,801,0566,1271,0625,1501,873,1365,0467,
						   1036,1330,1386,459,1592,1664,916,1159,1899,1023,860,796,988,0411,0673,0617,587,1207,817,924,1565,681,1784,1087,0646,1437,0710,980,967,0475,
						   339,1421,0176,1378,0304,993,1373,1258,0133,1506,1998,0446,1100,1138,1963,18,296,1549,1792,0531,844,1656,1493,1429,1621,1044,1052,219,1250,
						   689,1309,1450,1557,1314,1886,1720,1279,69,1878,0275,1613,1600,1108,582,972,809,1480,937,1095,1536,0005,1891,0766,1608,0630,1079,1202,1771,
						   595,1015,1394,1194,929,1651,1164,539,0104,0125,0061,1677,852,1322,1942,189,518,1822,0702,0510,908,1715,0232,1215,1442,0112,1728,1736,168,
						   1934,638,0523,0240,881,1835,0403,0753,1827,1031,283,1266,0737,758,694,1779,1485,1955,0574,0502,48,1763,1151,0454,1496,1296,0427,0500,1753,
						   0526,0735,1047,0641,1859,0227,0355,1248,1509,1787,954,1453,1424,0043,184,291,1971,932,1517,1232,0620,1924,0013,804,1902,0077,0612,478,1817,
						   0334,1312,1317,0363,692,1175,0256,1013,0214,1141,1830,825,1838,0740,94,970,0342,0756,983,834,1282,1937,0505,799,855,1218,128,1061,1133,385,
						   628,1368,1680,1274,492,0307,329,0265,0457,1881,0141,419,1055,85,0056,0676,286,393,0072,1034,0150,1333,1253,0556,0115,906,0534,179,0713,1111,
						   449,0436,1945,1950,996,1325,1809,890,1646,847,1774,0462,927,0470,0371,0136,842,0727,1603,975,1389,1616,1467,1915,569,0607,1432,1488,1851,0761,
						   29,1162,1766,1018,1261,0000,0312,1907,1125,940,962,898,1090,0513,0243,0521,1688,719,158,0777,919,1026,0705,1667,783,1966,1355,1189,748,1539,1167,812,
						   1346,1744,1082,1069,0577,0051,1098,1958,0441,991,278,948,0406,0564,1560,1103,1005,769,1475,1360,0235,1077,0021,248,548,0671,1240,0064,0120,483,863,0663,1795,
						   398,1119,1894,0633,0414,8,1226,1573,1595,1531,1723,1146,876,1154,0321,820,791,1411,1552,1659,1338,299,884,598,1988,1290,1381,0171,1269,1445,1980,0377,1184,
						   1702,1210,684,1731,590,0542,1624,911,1582,1039,1197,192,1205,1638,1403,0107,868,1710,0654,0350,0200,649,1304,1873,697,0222,585,0255,383,0541,549,1452,1337,
						   0212,1054,1695,1994,648,1217,0041,1567,1930,840,0640,1845,1871,79,391,1986,1572,1508,1700,592,1131,298,768,1388,1529,1636,1965,1358,148,1246,1957,1161,1679,
						   0656,0661,0036,0356,1559,485,1174,1182,1615,84,0314,1687,0100,0327,1281,1850,0143,199,0562,1473,1273,0477,1730,1973,0712,1674,1802,1225,399,1401,0020,1631,
						   1738,1417,378,0677,597,1901 };
};

class Fixture :public ::testing::Test {
protected:
	TestDataStruct dataStruct;
	void SetUp() {
		
	}
	void TearDown() {

	}
	bool CheckArr(int* arr, int size) {
		int* end = arr + size - 1;
		while (arr != end)if (*arr > *(arr + 1)) { return false; }
		else { arr++; }
		return true;
	}
};

TEST_F(Fixture, checkArrTest) {
	EXPECT_TRUE(CheckArr(&dataStruct.table5Positiv.table5, 5));
	EXPECT_FALSE(CheckArr(&dataStruct.table5, 5));
	EXPECT_FALSE(CheckArr(&dataStruct.table10, 10));
	EXPECT_FALSE(CheckArr(&dataStruct.table100, 100));
	EXPECT_FALSE(CheckArr(&dataStruct.table1000, 1000));
}
